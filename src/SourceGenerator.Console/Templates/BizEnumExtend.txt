/*
  此代码通过 SourceGenerator，使用模板 Scriban 自动生成：{{ now() }} 
*/
{{ for using in usings }}
{{- using}}
{{ end }}using Mic.Aop;
using System.Collections.Generic;
using System.Linq;

namespace {{ namespace }}
{
    {{ split_string_by_whitespace access_modifier 0 }} partial class {{ name }}
    {
    {{- for prop in (property_list_attribute_filter property_meta 'BizDictionaryAttribute') }}
        /// <summary>
        /// {{ prop.description }}
        /// </summary> 
        {{ if (get_attribute_param_value prop 'BizDictionaryAttribute' 'BizType')=='BizTypeEnum.Enum' }}
        {{- prop.access_modifier}} string {{prop.name}}Text => {{prop.name}}.GetEnumDescription();
        {{- else }}
        {{- prop.access_modifier}} string {{prop.name}}Text { get; set; }
        {{- end }}
    {{- end }}
    }

    public static class {{ name }}_g_Extensions
    {
        public static List<{{ name }}> BindBizDictionary(this List<{{ name }}> list)
        {
            if (list == null || !list.Any()) return list;
            var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Dictionary') }}
            {{- dicKey = get_first_not_null_value (get_attribute_param_value prop 'BizDictionaryAttribute' 'Code') prop.name}}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) { codes.Add("{{dicKey}}"); }
            {{- end }}
            if (!codes.Any()) return list;
            var service = ServiceHelper.GetService<IBizDictionaryService>();
            var dic = AsyncHelper.RunSync(() => service.GetBizDictionary(codes));
            if (!dic.Any()) return list;
            foreach (var dto in list)
            {        
                {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Dictionary') }}
                {{- dicKey = get_first_not_null_value (get_attribute_param_value prop 'BizDictionaryAttribute' 'Code') prop.name}}
                {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
                if (!string.IsNullOrWhiteSpace(dto.{{prop.name}}) && dic.TryGetValue("{{dicKey}}", out List<DictionaryItem> value{{prop.name}}))
                {
                    {{- if isMultiple }}
                    dto.{{prop.name}}Text = string.Join("、", value{{prop.name}}.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                    {{- else }}
                    dto.{{prop.name}}Text = value{{prop.name}}.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                    {{- end }}     
                }
                {{- end }}            
            }
            return list;
        }

        public static {{ name }} BindBizDictionary(this {{ name }} dto)
        {
			if (dto == null) return dto;
			var codes = new List<string>();
			{{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Dictionary') }}
            {{- dicKey = get_first_not_null_value (get_attribute_param_value prop 'BizDictionaryAttribute' 'Code') prop.name}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.Add("{{dicKey}}"); }
            {{- end }}
			if (!codes.Any()) return dto;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var dic = AsyncHelper.RunSync(() => service.GetBizDictionary(codes));
			if (!dic.Any()) return dto;
			{{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Dictionary') }}
            {{- dicKey = get_first_not_null_value (get_attribute_param_value prop 'BizDictionaryAttribute' 'Code') prop.name}}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}}) && dic.TryGetValue("{{dicKey}}", out List<DictionaryItem> value{{prop.name}}))
            {
                {{- if isMultiple }}
                dto.{{prop.name}}Text = string.Join("、", value{{prop.name}}.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                {{- else }}
                dto.{{prop.name}}Text = value{{prop.name}}.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                {{- end }}                
            }
            {{- end }}   
			return dto;
		}

        public static List<{{ name }}> BindBizDepartment(this List<{{ name }}> list) 
        {
			if (list == null || !list.Any()) return list;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Department') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) {codes.AddRange(list.Where(d => !string.IsNullOrWhiteSpace(d.{{prop.name}})).SelectMany(d => d.{{prop.name}}.Split(',')).Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) { codes.AddRange(list.Select(d => d.{{prop.name}}).Distinct().ToList()); }
            {{- end }}
            {{- end }}
			if (!codes.Any()) return list;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizDepartment(codes.Distinct().ToList()));
			if (!data.Any()) return list;
			foreach (var dto in list) 
            {
                {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Department') }}
                {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
                if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
                {
                    {{- if isMultiple}}
                    dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                    {{- else }}
                    dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text; 
                    {{- end }}
                }
                {{- end }}
			}
			return list;
		}

        public static {{ name }} BindBizDepartment(this {{ name }} dto)
        {
			if (dto == null) return dto;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Department') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.AddRange(dto.{{prop.name}}.Split(',').Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.Add(dto.{{prop.name}}); }
            {{- end }}
            {{- end }}
            if (!codes.Any()) return dto;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizDepartment(codes.Distinct().ToList()));
			if (!data.Any()) return dto;
			{{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Department') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
            {
                {{- if isMultiple}}
                dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                {{- else }}
                dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text; 
                {{- end }}
            }
            {{- end }}
			return dto;
		}

        public static List<{{ name }}> BindBizRegion(this List<{{ name }}> list) 
        {
			if (list == null || !list.Any()) return list;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Region') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) {codes.AddRange(list.Where(d => !string.IsNullOrWhiteSpace(d.{{prop.name}})).SelectMany(d => d.{{prop.name}}.Split(',')).Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) {codes.AddRange(list.Select(d => d.{{prop.name}}).Distinct().ToList()); }
            {{- end }}
            {{- end }}
			if (!codes.Any()) return list;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizRegion(codes.Distinct().ToList()));
			if (!data.Any()) return list;
			foreach (var dto in list) 
            {
                {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Region') }}
                {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
                if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
                {
                    {{- if isMultiple}}
                    dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                    {{- else }}
                    dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                    {{- end }}
                }
                {{- end }}
            }
			return list;
		}

        public static {{ name }} BindBizRegion(this {{ name }} dto)
        {
			if (dto == null) return dto;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Region') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.AddRange(dto.{{prop.name}}.Split(',').Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.Add(dto.{{prop.name}}); }
            {{- end }}
            {{- end }}
			if (!codes.Any()) return dto;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizRegion(codes.Distinct().ToList()));
			if (!data.Any()) return dto;
			{{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.Region') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
            {
                {{- if isMultiple}}
                dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                {{- else }}
                dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                {{- end }}
            }
            {{- end }}
			return dto;
		}

        public static List<{{ name }}> BindBizUser(this List<{{ name }}> list) 
        {
			if (list == null || !list.Any()) return list;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.User') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) {codes.AddRange(list.Where(d => !string.IsNullOrWhiteSpace(d.{{prop.name}})).SelectMany(d => d.{{prop.name}}.Split(',')).Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (list.Exists(d => !string.IsNullOrWhiteSpace(d.{{prop.name}}))) {codes.AddRange(list.Select(d => d.{{prop.name}}).Distinct().ToList()); }
            {{- end }}
            {{- end }}
			if (!codes.Any()) return list;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizUser(codes.Distinct().ToList()));
			if (!data.Any()) return list;
			foreach (var dto in list) 
            {
                {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.User') }}
                {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
                if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
                {
                    {{- if isMultiple}}
                    dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                    {{- else }}
                    dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                    {{- end }}
                }
                {{- end }}
            }
			return list;
		}

        public static {{ name }} BindBizUser(this {{ name }} dto)
        {
			if (dto == null) return dto;
			var codes = new List<string>();
            {{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.User') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            {{- if isMultiple}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.AddRange(dto.{{prop.name}}.Split(',').Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().ToList()); }
            {{- else }}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) { codes.Add(dto.{{prop.name}}); }
            {{- end }}
            {{- end }}
			if (!codes.Any()) return dto;
			var service = ServiceHelper.GetService<IBizDictionaryService>();
			var data = AsyncHelper.RunSync(() => service.GetBizUser(codes.Distinct().ToList()));
			if (!data.Any()) return dto;
			{{- for prop in (property_list_attribute_with_param_filter property_meta 'BizDictionaryAttribute' 'BizType' 'BizTypeEnum.User') }}
            {{- isMultiple = (get_attribute_param_value prop 'BizDictionaryAttribute' 'IsMultiple')=='true'}}
            if (!string.IsNullOrWhiteSpace(dto.{{prop.name}})) 
            {
                {{- if isMultiple}}
                dto.{{prop.name}}Text = string.Join("、", data.Where(d => dto.{{prop.name}}.Split(',').Distinct().Where(t => !string.IsNullOrWhiteSpace(t)).ToList().Contains(d.Value)).Select(d => d.Text).ToList());
                {{- else }}
                dto.{{prop.name}}Text = data.FirstOrDefault(d => d.Value == dto.{{prop.name}})?.Text;
                {{- end }}
            }
            {{- end }}
			return dto;
		}
    }
}