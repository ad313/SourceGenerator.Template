/*
  此代码通过 SourceGenerator，使用模板 Scriban 自动生成：{{ date.now | date.to_string '%F %r' }} 
*/
{{ for using in using_list }}
using {{ using }};
{{- end }}
using Microsoft.Extensions.DependencyInjection;

namespace {{ namespace }}
{
    {{- className = name + '_g' }}
    /// <summary>
    /// 继承 {{ name }} 实现方法拦截
    /// </summary>
    public sealed class {{ className }} : {{ name }}
    {
        {{- # 处理构造函数参数 }}
        {{- curArray = ['IServiceProvider serviceProvider0'] }}
        {{- curBaseArray = [] }}       
        {{- for cur in constructor }}
        {{- curArray = (curArray | array.add (cur.key + ' ' + cur.value)) }}
        {{- curBaseArray = (curBaseArray | array.add cur.value) }}
        {{- end }}   
        {{- curString = (curArray | array.join ', ')}}
        {{- curBaseString = (curBaseArray | array.join ', ')}}
        
        {{- # 处理构造函数 }}
        {{- if constructor.size>0 }}
        {{- curBaseString = ': base(' + curBaseString + ')' }}        
        {{- end }}        
        private readonly IServiceProvider _serviceProvider0;
        public {{className}}({{ curString }}) {{ curBaseString }}       
        {
            _serviceProvider0 = serviceProvider0;
        }
        
        {{- # 生成拦截方法，只有有aop标记的才会生成 }}
        {{- for method in method_meta_data }}  
        {{- if (method.attribute_meta_data!=null && method.attribute_meta_data.size>0) }}
        
        {{- # 处理方法输入参数 }}
        {{- methodParamArray = [] }}
        {{- methodDicParamArray = [] }}       
        {{- for cur in method.param }}
        {{- methodParamArray = (methodParamArray | array.add (cur.key + " " + cur.value)) }}
        {{- methodDicParamArray = (methodDicParamArray | array.add ('{ "' + cur.value + '", ' + cur.value + ' }')) }}
        {{- end }}   
        {{- methodDicParam = (methodDicParamArray | array.join ', ')}}
        {{- methodParam = (methodParamArray | array.join ', ')}}
        
        {{- # 处理方法名称 }}
        {{- methodName = '' }}
        {{- if method.is_task }}
        {{- methodName = methodName + 'async ' }}
        {{- end }}    
        {{- methodName = methodName + method.return_value + ' ' + method.name + '(' + methodParam + ')' }}
         
        {{- # 处理调用方法参数 }}
        {{- methodCallParam = (method.param | array.map 'value') | array.join ', '}}
             
        public override {{ methodName }}
        {
            {{- # 拦截器上下文 }}
            var aopContext = new AopContext(_serviceProvider0,
                new Dictionary<string, dynamic>() { {{methodDicParam}} },
                {{ method.is_task }},
                {{ method.has_return_value }},
                null);

            {{- # 处理拦截器参数，拿到当前拦截器，并赋值（打标记时的输入参数）。可能有多个拦截器 }}
            {{ index = 0 }}
            {{- for attr in method.attribute_meta_data }}                
            var aopInterceptor{{ index }} = _serviceProvider0.GetRequiredService<{{attr.full_name}}>();
            {{- for pams in attr.param_dictionary }}
            aopInterceptor{{ index }}.{{ pams.key }} = {{ pams.value }};
            {{- end }}  
            {{ index = index + 1 }}
            {{- end }}  
        
            {{- # 多个拦截器，按照管道堆栈模式，先进后出。这里是 Before 方法 }}
            {{- index = 0 }}
            {{- for attr in method.attribute_meta_data }}                
            if (aopInterceptor{{ index }}.HasBefore) aopContext = {{- if method.is_task }} await aopInterceptor{{ index }}.BeforeAsync(aopContext); {{- else }} aopInterceptor{{ index }}.Before(aopContext); {{- end }}  
            {{- index = index + 1 }}
            {{- end }}  
        
            {{- # 只有最后一个拦截器才有 Next 方法 }}
            {{- index = method.attribute_meta_data.size - 1 }}
            {{- for attr in method.attribute_meta_data  }}                
            {{- if index == method.attribute_meta_data.size - 1 }}            
            if (aopInterceptor{{ index }}.HasAopNext)
            {
                if (aopInterceptor{{ index }}.HasActualNext)
                {
                {{- if method.is_task==false && method.has_return_value==false }}
                    aopContext.ActualMethod = () => Task.Run(() => base.{{ method.name }}({{methodCallParam}}));
                {{- else }}
                    aopContext.ActualMethod = () => base.{{ method.name }}({{methodCallParam}});
                {{- end }}  
                }
        
                aopContext = {{- if method.is_task }} await aopInterceptor{{ index }}.NextAsync(aopContext); {{- else }} aopInterceptor{{ index }}.Next(aopContext); {{- end }}  
            }
            else
            {
                if (aopInterceptor{{ index }}.HasActualNext)
                {
                    {{ if method.has_return_value }}aopContext.ReturnValue = {{ end }} {{- if method.is_task }}await {{ end }}base.{{ method.name }}({{methodCallParam}});
                }
            }            
            {{ end }}
            {{- # After }}
            if (aopInterceptor{{ index }}.HasAfter) aopContext = {{- if method.is_task }} await aopInterceptor{{ index }}.AfterAsync(aopContext); {{- else }} aopInterceptor{{ index }}.After(aopContext); {{- end }}  
            {{- index = index - 1 }}
            {{- end }}  
            
            {{- # 返回值 }}
            {{- if method.has_return_value }}
            return aopContext.ReturnValue;
            {{- end }}  
        }
        
        {{- end }}    
        {{- end }}    
    }
}